"""
Test helpers specific to HMM
"""

import numpy as np
from microscopes.common import validator
from microscopes.hmm.definition import model_definition

def toy_model(defn, states=5):
  """From a model definition, generate a random HMM transition
  and observation matrix

  Parameters
  ----------
  defn:   model definition (specifies number of outputs)
  states: number of latent states

  Output
  ------
  obs_mat:   Observation matrix
  trans_mat: Transition matrix
  """
  obs_mat   = np.random.dirichlet(alpha=np.ones(defn.N()),size=states)
  trans_mat = np.random.dirichlet(alpha=np.ones(states),size=states)

  return obs_mat, trans_mat

def toy_dataset_and_states(defn, states=5, avglen=100, numobs=100):
  """Create a toy dataset for evaluating HMM inference, return
  the data as well as the latent state sequence.

  Parameters
  ----------
  defn:   model definition
  states: number of latent states
  avlen:  average length of one observation sequence
    (actual length is sampled from a poisson distribution)
  numobs: number of observation sequences

  Output
  ------
  data:   the observations generated from the HMM
  states: the corresponding latent state sequence
  """

  validator.validate_type(defn, model_definition, 'defn')
  obs_mat, trans_mat = toy_model(defn, states)
  return gen_data(trans_mat, obs_mat, avglen, numobs)

def toy_dataset(defn, states=5, avglen=100, numobs=100):
  """Create a toy dataset for evaluating HMM inference, return
  just the data.

  Parameters
  ----------
  defn:   model definition
  states: number of latent states
  avlen:  average length of one observation sequence
    (actual length is sampled from a poisson distribution)
  numobs: number of observation sequences

  Output
  ------
  data: the observations generated from the HMM
  """
  data, _ = toy_dataset_and_states(defn, states, avglen, numobs)
  return data

def gen_data(trans_mat, obs_mat, avglen=100, numobs=100, seed=None):
  """ Generate data from a known HMM.

  Parameters
  ----------
  trans_mat: Transition matrix
  obs_mat:   Observation matrix
  avg_len:   Average length of one observed sequence
  numobs:    Number of observed sequences
  seed:      Seed for numpy's RNG, for reproducability

  Output
  ------
  data:   Observed data generated by HMM
  states: Latent state sequence of the HMM
  """
  np.random.seed(seed=seed)
  data = []
  states = []
  for i in xrange(numobs):
    T = np.random.poisson(lam=avglen)
    state = 0
    states.append(T * [None])
    data.append(T * [None])
    for t in xrange(T):
      state        = np.nonzero(np.random.multinomial(n=1,pvals=trans_mat[state]))[0][0]
      data[i][t]   = np.nonzero(np.random.multinomial(n=1,pvals=obs_mat[state]))[0][0]
      states[i][t] = state
  return data, states